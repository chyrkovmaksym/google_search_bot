const TelegramApi = require('node-telegram-bot-api');
const google = require('googlethis');
const fs = require('fs');
const Tesseract = require('tesseract.js');
const { TOKEN } = require('./config');

const bot = new TelegramApi(TOKEN, { polling: true });

bot.setMyCommands([{ command: '/start', description: 'start' }]);

const hearts = ['‚ù§Ô∏è', 'üíõ', 'üíö', 'üíô', 'üíú', 'üß°'];
const printHeart = (index, prevId, thisId) => {
  let res = '';
  for (let i = 0; i < index; i++) {
    res += `${hearts[thisId]} `;
  }
  for (let i = index - 1; i < 6; i++) {
    res += `${hearts[prevId]} `;
  }
  return res;
};
bot.on('polling_error', console.log);

bot.on('photo', async (msg) => {
  const chatId = msg.chat.id;
  const name = msg.chat.first_name;
  await bot.sendMessage(chatId, '–û—á—ñ–∫—É–π—Ç–µ...');
  await bot
    .downloadFile(msg.photo[msg.photo.length - 1].file_id, './images')
    .then(async (path) => {
      await Tesseract.recognize(path, 'ukr').then(
        async ({ data: { text } }) => {
          await bot.sendMessage(chatId, text);
          startSearch(chatId, text);
        }
      );
    });
});

bot.on('text', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  const name = msg.chat.first_name;
  if (text === '/start') {
    let k = 0;
    await bot.sendMessage(
      chatId,
      '–ü—Ä–∏–≤—ñ—Ç! –Ø –≤–º—ñ—é –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ –¥–ª—è –≤–∞—Å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é, –ø–æ–≤—ñ–¥–æ–º–ª—è—Ç–∏ –ø–æ–≥–æ–¥—É —Ç–∞ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—Ç–∏ –≤–∞—à —Ç–µ–∫—Å—Ç –Ω–∞ –±–µ–∑–ª—ñ—á –º–æ–≤. –î–æ—Å—Ç–∞—Ç–Ω—å–æ –≤–≤–µ—Å—Ç–∏ –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç, –∞ —è —Å–ø—Ä–æ–±—É—é –¥–∞—Ç–∏ –≤–∞–º –≤—ñ–¥–ø–æ–≤—ñ–¥—å. –ü—Ä–∏–∫–ª–∞–¥: "–ø–æ–≥–æ–¥–∞ –≤ –£–∫—Ä–∞—ó–Ω—ñ". –¢–∞–∫–æ–∂ —Ç–µ–ø–µ—Ä –¥–æ—Å—Ç—É–ø–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–∫–æ–Ω—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏. –î–æ—Å—Ç–∞—Ç–Ω—å–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –º–µ–Ω—ñ —Ñ–æ—Ç–æ –∑ —á—ñ—Ç–∫–∏–º —ñ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–º —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é. –ü—Ä–∏—î–º–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è)'
    );
    await bot.sendMessage(chatId, printHeart(0, 0, 5)).then((ownMsg) => {
      let i = 0;
      let prevId = 5;
      let thisId = 0;
      let k = 0;
      const timer = setInterval(() => {
        bot.editMessageText(printHeart(i, prevId, thisId), {
          message_id: ownMsg.message_id,
          chat_id: chatId,
        });
        i++;
        if (i === 7) {
          i = 0;
          prevId < hearts.length - 1 ? prevId++ : (prevId = 0);
          thisId < hearts.length - 1 ? thisId++ : (thisId = 0);
          k++;
          if (k === 8) {
            lastMessage(ownMsg.message_id, chatId);
            clearInterval(timer);
          }
        }
      }, 300);
    });
  } else {
    startSearch(chatId, text);
  }
});

async function startSearch(chatId, query) {
  const options = {
    page: 0,
    safe: false,
    additional_params: {
      hl: 'ua',
    },
  };

  const response = await google.search(query, options);
  await bot.sendMessage(chatId, '–í–∏–∫–æ–Ω—É—é –ø–æ—à—É–∫...');
  if (response.knowledge_panel.description !== 'N/A') {
    await bot.sendMessage(chatId, response.knowledge_panel.description);
    await bot.sendMessage(chatId, '–ë—ñ–ª—å—à–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó —Ç—É—Ç: ');
    await bot.sendMessage(chatId, response.knowledge_panel.url);
  } else if (response.translation !== undefined) {
    await bot.sendMessage(
      chatId,
      `${response.translation.source_language.split(' ')[0]}: ${
        response.translation.source_text
      } \n${response.translation.target_language}: ${
        response.translation.target_text
      }`
    );
  } else if (response.weather !== undefined) {
    await bot.sendMessage(
      chatId,
      `–†–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è: ${response.weather.location} \n–ü—Ä–æ–≥–Ω–æ–∑: ${response.weather.forecast} \n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${response.weather.temperature} ¬∞C \n–í–æ–ª–æ–≥—ñ—Å—Ç—Ç—å –ø–æ–≤—ñ—Ç—Ä—è: ${response.weather.humidity} \n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤: ${response.weather.precipitation} \n–®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—É: ${response.weather.wind}`
    );
  } else {
    if (response.results.length >= 2) {
      await bot.sendMessage(
        chatId,
        '–û—Å—å –¥–µ–∫—ñ–ª—å–∫–∞ –ø–æ—Å–∏–ª–∞–Ω—å, —â–æ –º–æ–∂—É—Ç—å –≤–∞—Å –∑–∞—Ü—ñ–∫–∞–≤–∏—Ç–∏:'
      );
      for (let i = 0; i < 2; i++) {
        await bot.sendMessage(chatId, response.results[i].url);
      }
    } else {
      await bot.sendMessage(
        chatId,
        `–ù–∞ –∂–∞–ª—å, –º–µ–Ω—ñ –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø–æ –∑–∞–ø–∏—Ç—É "${query}"`
      );
    }
  }
}

async function lastMessage(message_id, chatId) {
  await bot.editMessageText('üß° üß° üß° üß° üß° üß° ', {
    message_id: message_id,
    chat_id: chatId,
  });
}
